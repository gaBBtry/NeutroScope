#!/usr/bin/env python3
"""
Script de build pour cr√©er l'ex√©cutable Windows de NeutroScope
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def main():
    """Script principal de build"""
    print("üîß Cr√©ation de l'ex√©cutable Windows NeutroScope...")
    
    # V√©rifier que nous sommes dans le bon r√©pertoire
    if not Path("main.py").exists():
        print("‚ùå Erreur: main.py non trouv√©. Ex√©cutez ce script depuis la racine du projet.")
        sys.exit(1)
    
    # Nettoyer les builds pr√©c√©dents
    print("üßπ Nettoyage des builds pr√©c√©dents...")
    dirs_to_clean = ["build", "dist", "__pycache__"]
    for dir_name in dirs_to_clean:
        if Path(dir_name).exists():
            shutil.rmtree(dir_name)
            print(f"   Supprim√©: {dir_name}")
    
    # Supprimer les fichiers .spec existants
    for spec_file in Path(".").glob("*.spec"):
        spec_file.unlink()
        print(f"   Supprim√©: {spec_file}")
    
    # Cr√©er le r√©pertoire de sortie
    output_dir = Path("releases")
    output_dir.mkdir(exist_ok=True)
    
    # Commande PyInstaller
    cmd = [
        "pyinstaller",
        "--onefile",                    # Un seul fichier ex√©cutable
        "--windowed",                   # Pas de console (interface graphique)
        "--name=NeutroScope",           # Nom de l'ex√©cutable
        "--icon=docs/icon.ico" if Path("docs/icon.ico").exists() else "",  # Ic√¥ne si disponible
        "--add-data=config.json;.",     # Inclure le fichier de config
        "--paths=src",                  # Ajouter src au path de recherche
        "--hidden-import=PyQt6.QtCore", # Imports cach√©s n√©cessaires pour PyQt6
        "--hidden-import=PyQt6.QtGui",
        "--hidden-import=PyQt6.QtWidgets",
        "--hidden-import=matplotlib.backends.backend_qt5agg",
        "--hidden-import=matplotlib.backends.backend_agg",
        "--hidden-import=numpy",
        "--hidden-import=scipy",
        "--collect-submodules=src",     # Inclure r√©cursivement tous les modules src
        "--exclude-module=tkinter",     # Exclure tkinter pour r√©duire la taille
        "--exclude-module=unittest",    # Exclure unittest pour r√©duire la taille
        "--exclude-module=test",        # Exclure les modules de test
        "--distpath=releases",          # R√©pertoire de sortie
        "main.py"                       # Point d'entr√©e
    ]
    
    # Filtrer les arguments vides
    cmd = [arg for arg in cmd if arg]
    
    print("üöÄ Lancement de PyInstaller...")
    print(f"Commande: {' '.join(cmd)}")
    
    try:
        # Ex√©cuter PyInstaller
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print("‚úÖ Build r√©ussi!")
        
        # V√©rifier que l'ex√©cutable a √©t√© cr√©√©
        exe_path = output_dir / "NeutroScope.exe"
        if exe_path.exists():
            file_size = exe_path.stat().st_size / (1024 * 1024)  # Taille en MB
            print(f"üì¶ Ex√©cutable cr√©√©: {exe_path}")
            print(f"üìä Taille: {file_size:.1f} MB")
            
            # Copier les fichiers additionnels si n√©cessaire
            additional_files = ["README.md", "config.json"]
            for file_name in additional_files:
                if Path(file_name).exists():
                    shutil.copy(file_name, output_dir)
                    print(f"üìÑ Copi√©: {file_name}")
            
            print("\nüéâ Build termin√© avec succ√®s!")
            print(f"üéØ L'ex√©cutable est disponible dans: {output_dir.absolute()}")
            print("\nüìã Instructions pour le partage:")
            print("1. Copiez le dossier 'releases' sur votre OneDrive")
            print("2. Partagez le lien vers NeutroScope.exe")
            print("3. Les utilisateurs peuvent lancer directement l'ex√©cutable")
            
        else:
            print("‚ùå Erreur: L'ex√©cutable n'a pas √©t√© cr√©√©")
            sys.exit(1)
            
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors du build: {e}")
        if e.stdout:
            print("üì§ Sortie standard:")
            print(e.stdout)
        if e.stderr:
            print("üì§ Erreur standard:")
            print(e.stderr)
        sys.exit(1)
    except FileNotFoundError:
        print("‚ùå Erreur: PyInstaller n'est pas install√©.")
        print("üí° Installez-le avec: pip install pyinstaller")
        sys.exit(1)

if __name__ == "__main__":
    main() 